const { createCanvas, loadImage } = require("canvas");
const fs = require("fs-extra");
const axios = require("axios");
const path = require("path");

module.exports = {
  config: {
    name: "fakechat",
    version: "1.0",
    author: "Your Name",
    description: {
      en: "Create a fake chat with chat bubbles resembling Messenger's chat theme."
    },
    category: "utility",
    usage: "{prefix}fakechat [text]",
    example: "{prefix}fakechat Hello there!|Hey, how are you?"
  },

  wrapText: async (ctx, text, maxWidth) => {
    return new Promise(resolve => {
      if (ctx.measureText(text).width < maxWidth) return resolve([text]);
      if (ctx.measureText('W').width > maxWidth) return resolve(null);
      const words = text.split(' ');
      const lines = [];
      let line = '';
      while (words.length > 0) {
        let split = false;
        while (ctx.measureText(words[0]).width >= maxWidth) {
          const temp = words[0];
          words[0] = temp.slice(0, -1);
          if (split) words[1] = `${temp.slice(-1)}${words[1]}`;
          else {
            split = true;
            words.splice(1, 0, temp.slice(-1));
          }
        }
        if (ctx.measureText(`${line}${words[0]}`).width < maxWidth) line += `${words.shift()} `;
        else {
          lines.push(line.trim());
          line = '';
        }
        if (words.length === 0) lines.push(line.trim());
      }
      return resolve(lines);
    });
  },

  onStart: async function ({ api, event, args, usersData }) {
    let { threadID, messageID, senderID } = event;
    let pathImg = __dirname + '/cache/chat.png'; // Path to save the fake chat image

    const inputText = args.join(" ");
    const messages = inputText.split("|");

    // Fetch sender's info to get the profile picture URL
    const uid = senderID;
    const senderInfo = await api.getUserInfo(uid);
    const senderName = senderInfo[uid].name;
    const avtUrl = await usersData.getAvatarUrl(uid);
    const avtStream = await axios.get(avtUrl, { responseType: 'arraybuffer' });
    const avtImage = await loadImage(Buffer.from(avtStream.data, 'utf-8'));

    // Create a canvas with a black background
    const canvasWidth = 800; // Set canvas width
    const canvasHeight = 600; // Set canvas height
    const canvas = createCanvas(canvasWidth, canvasHeight);
    const ctx = canvas.getContext("2d");
    ctx.fillStyle = "#000000"; // Black background color
    ctx.fillRect(0, 0, canvasWidth, canvasHeight);

    // Set chat bubble colors
    const myBubbleColor = '#0084ff'; // Blue
    const otherBubbleColor = '#e5e5ea'; // Light gray
    const textColor = '#ffffff'; // White

    // Draw chat bubbles and text
    const bubblePadding = 10;
    const bubbleMargin = 10;
    const bubbleRadius = 20;
    const bubbleHeight = 100; // Increased bubble height to accommodate profile picture
    const maxWidth = canvasWidth - 2 * bubbleMargin - 2 * bubblePadding;

    let y = bubbleMargin;
    for (let i = 0; i < messages.length; i++) {
        const message = messages[i];
        const lines = await this.wrapText(ctx, message, maxWidth);
        if (lines) {
            const bubbleWidth = Math.max(...lines.map(line => ctx.measureText(line).width)) + 2 * bubblePadding;
            const x = canvasWidth / 2 - bubbleWidth / 2;

            // Draw profile picture
            const avtX = bubbleMargin; // Position profile picture at the leftmost side
            const avtY = y + bubbleHeight / 2 - avtImage.height / 2;
            ctx.save();
            ctx.beginPath();
            ctx.arc(avtX + avtImage.width / 2, avtY + avtImage.height / 2, avtImage.width / 2, 0, Math.PI * 2);
            ctx.clip();
            ctx.drawImage(avtImage, avtX, avtY, avtImage.width, avtImage.height);
            ctx.restore();

            // Draw text bubble
            ctx.fillStyle = myBubbleColor;
            ctx.beginPath();
            ctx.moveTo(x + avtImage.width + bubblePadding, y);
            ctx.lineTo(x + bubbleWidth - bubbleRadius, y);
            ctx.arc(x + bubbleWidth - bubbleRadius, y + bubbleRadius, bubbleRadius, 1.5 * Math.PI, 2 * Math.PI);
            ctx.lineTo(x + bubbleWidth, y + bubbleHeight - bubbleRadius);
            ctx.arc(x + bubbleWidth - bubbleRadius, y + bubbleHeight - bubbleRadius, bubbleRadius, 0, 0.5 * Math.PI);
            ctx.lineTo(x + avtImage.width + bubblePadding, y + bubbleHeight);
            ctx.lineTo(x + avtImage.width + bubblePadding, y);
            ctx.closePath();
            ctx.fill();

            // Draw text
            ctx.fillStyle = textColor;
            ctx.font = "20px sans-serif";
            ctx.textBaseline = "top";
            lines.forEach((line, index) => {
                ctx.fillText(line, x + avtImage.width + bubblePadding + bubblePadding, y + bubblePadding + index * 24);
            });

            // Update y position for the next bubble
            y += bubbleHeight + bubbleMargin;
        }
    }

    // Save the final image
    const finalImageBuffer = canvas.toBuffer();
    fs.writeFileSync(pathImg, finalImageBuffer);

    // Send the fake chat image
    api.sendMessage({ attachment: fs.createReadStream(pathImg) }, threadID, () => fs.unlinkSync(pathImg), messageID);
  }
};
